void merge (int * array, int * left, int * right, int size)
{
    int mid = size / 2;
    int n = 0; //array index
    int j = 0; //left index
    int k = 0; //right index
    while (j < mid && k < size - mid)
    {
        if (right[k] < left[j])
        {
            array[n] = right[k];
            k++;
            n++;
        }
        else
        {
            array[n] = left[j];
            j++;
            n++;
        }
    }
    while (j < mid)
    {
        array[n] = left[j];
        j++;
        n++;
    }
    while (k < size - mid)
    {
        array[n] = right[k];
        k++;
        n++;
    }
}

void mergeSort (int * arr, int size)
{
    if (size == 0) return;
    if (size == 1) return;
    int mid = size / 2;
    int left_half[mid];
    for (int i = 0; i < mid; i++)
    {
        left_half[i] = arr[i];
    }
    int right_half[size - mid];
    for (int i = 0; i < size - mid; i++)
    {
        right_half[i] = arr[mid + i];
    }
    mergeSort (left_half, mid);
    mergeSort (right_half, size - mid);
    merge (arr, left_half, right_half, size);
}

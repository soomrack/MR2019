#include <iostream>
#include <algorithm>
#include <cmath>
void siftUp (int* const array, int current_element)
{
    int parent = (current_element - 1) / 2;
    if (parent >= 0 && array[current_element] > array[parent])
    {
        std::swap(array[current_element], array[parent]);
        siftUp(array, current_element);
    }
    else
    {
        return;
    }
}

void buildBinaryHeapRecursion(int* const array, int heap_size, int current_element)
{
    if (current_element >= log2(heap_size) + 1)
        return;
    int left = 2 * current_element + 1;
    int right = 2 * current_element + 2;
    if (array[current_element] < array[left] && array[left] > array[right])
        std::swap(array[current_element], array[left]);
    if (array[current_element] < array[right] && array[right] > array[left])
        std::swap(array[current_element], array[right]);
    siftUp(array, current_element);
    buildBinaryHeapRecursion(array, heap_size, current_element + 1);
}

void buildBinaryHeap(int* const array, int number_of_elements)
{
    for (int heap_height = 0; heap_height < log2(number_of_elements); heap_height++)
    {
        for (int root_nood = 0; root_nood < log2(number_of_elements) + 1; root_nood++)
        {
            int left = 2 * root_nood + 1;
            int right = 2 * root_nood + 2;
            int max = std::max(array[left], array[right]);
            if (array[root_nood] < max && max == array[left])
                std::swap(array[root_nood], array[left]);
            else if (array[root_nood] < max && max == array[right])
                std::swap(array[root_nood], array[right]);
        }
    }
}

int main()
{
    int array1[10]{ 72, 2, 1, 7, 9, 3, 4, 6 , 23, 5 };
    buildBinaryHeap(array1, 10);
    int array2[10]{ 72, 2, 1, 7, 9, 3, 4, 6 , 23, 5 };
    buildBinaryHeapRecursion(array2, 10, 0);
}
